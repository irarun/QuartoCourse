{
  "hash": "ba47eaa1150027ef7002a43a34648887",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"inteructive\"\nengine: knitr\nformat: live-html\n---\n\n```         \n\n::: {.cell}\n\n:::\n\n\n```\n\n\n::: {.cell edit='false' autorun='true'}\n```{webr}\n#| output: false\n#| echo: FALSE\n#| edit: false\n#| autorun: true\nlibrary(babynames)\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(dplyr)\n```\n:::\n\n\n```         \n Histogram interacting with a javascript [Observable input](https://github.com/observablehq/inputs?tab=readme-ov-file) component:\n```\n\n```{ojs}\n//| echo: false\nviewof sex_box = Inputs.checkbox(\n  [\"M\", \"F\"],\n  {\n    value: [\"M\", \"F\"],\n    label: \"Shown sexes:\",\n  }\n)\n```\n\n\n::: {.cell edit='false' autorun='true' input='sex_box'}\n```{webr}\n#| echo: FALSE\n#| edit: false\n#| autorun: true\n#| input:\n#|   - sex_box\n\nnbins = 100\ndata = babynames %>% filter( sex %in% sex_box  )\n\nggplot( data , aes(x=n , fill = sex) ) + geom_histogram(bins = nbins) + scale_x_log10()\n\n```\n:::\n\n\nLalala\n\n\n::: {.cell edit='false' autorun='true'}\n```{webr}\n#| echo: false\n#| edit: false\n#| autorun: true\n\nget_most_frequent <- function(babynames, select_sex, from = 1950) {\n  most_freq <- babynames |>\n    filter(sex == select_sex, year > from) |>\n    group_by(name) |>\n    summarise(average = mean(prop)) |>\n    arrange(desc(average))\n    \n  return(list(\n    babynames = babynames,\n    most_frequent = most_freq,\n    sex = select_sex,\n    from = from))\n}\n\nplot_top <- function(x, top = 10) {\n  topx <- x$most_frequent$name[1:top]\n  \n  p <- x$babynames |>\n    filter(name %in% topx, sex == x$sex, year > x$from) |>\n    ggplot(aes(x = year, y = prop, color = name)) +\n    geom_line() +\n    scale_color_brewer(palette = \"Paired\") +\n    theme_classic()\n  \n  return(p)\n}\n\n```\n:::\n\n\n```         \nA more complex examples with more interactive inputs (NB: it seems that when moving the slider the image get re-computed for each intermediate value, leading to some slowness sometimes)  :\n\n```\n\n\n::: {.cell edit='false' autorun='true' input='[\"sex_show\",\"year\",\"n_names\"]'}\n```{webr}\n#| echo: FALSE\n#| edit: false\n#| autorun: true\n#| input:\n#|   - sex_show\n#|   - year\n#|   - n_names\n\nget_most_frequent(babynames, select_sex = sex_show , from = year ) |>\n  plot_top(top=n_names)\n\n```\n:::\n\n\nNOTE: webr and ojs cells must be separated!!!\n\n```{ojs}\n//| echo: false\nviewof sex_show = Inputs.radio([\"M\", \"F\"], {label: \"Sex:\",value:\"F\"})\n\nviewof year = Inputs.range([1880, 2010], {step: 10, label: \"starting year:\"})\n\nviewof n_names = Inputs.range([1, 12], {step: 1, label: \"number of top names:\"})\n```\n\n```         \nInteractive R/python cells to execute the code :\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (x in 1:5) {\n  print(x ** 2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n```\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}